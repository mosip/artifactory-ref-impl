{
    "commons": {
        "home": "Home",
        "search": "Search",
        "goBack": "Go Back",
        "emptyMsg": "No Data Available.",
        "logout": "Logout",
        "sessionIdleLogout": "Due to inactivity, you will be logged out",
        "somethingWentWrong": "Something went wrong!",
        "somethingWentWrongDesc": "Please try again later",
        "noAccess": "You do not have privilege to access this page",
        "noAccessDesc": "Please contact your administrator",
        "timeout": "Request timed out",
        "timeoutDesc": "Server took too long to respond, please try again later",
        "nameTooLong": "Name should not allow more than {{length}} characters.",
        "specialCharNotAllowed": "Special characters are not allowed.",
        "urlTooLong": "URI should not allow more than {{length}} characters.",
        "invalidUrl": "Enter a valid URI",
        "duplicateUrl": "Duplicate URIs are not allowed",
        "errorInResponse": "While fetching all approved auth partner policies, we have encountered with an error",
        "filterBtn": "Filter",
        "resetFilter": "Reset Filter",
        "itemsPerPage": "Items per page"
    },
    "dashboard": {
        "welcomeMsg": "Welcome {{firstName}} {{lastName}}",
        "partnerTypeRequest": "Partner Types",
        "partnerTypeRequestDesc": "Request for another partner type if your organisation provides multiple partner services.",
        "organisationUsers": "Users",
        "organisationUsersDesc": "Approve or reject new user registration requests from same organisation.",
        "partnerCertificate": "Partner Certificate",
        "partnerCertificateDesc": "Certificate upload, re-upload, download and view certificate details.",
        "policies": "Policies",
        "policiesDesc": "Request and view your policies",
        "authenticationServices": "Authentication Services",
        "authenticationServicesDesc": "Request OIDC Client creation / API key generation for eSignet and API key based authentications",
        "userRegistrationError": "Unable to register user. Try login again!",
        "verifyEmailError": "Error during user's email verification. Try login again!"
    },
    "header": {
        "userProfile": "User Profile",
        "changePassword": "Change Password"
    },
    "userProfile": {
        "myProfile": "My Profile",
        "profileInformation": "Profile Information",
        "firstName": "First Name",
        "lastName": "Last Name",
        "organisationName": "Organisation Name",
        "address": "Address",
        "partnerType":"Partner Type",
        "phoneNumber": "Phone Number",
        "emailAddress": "Email Address",
        "userName": "User Name"
    },
    "footer": {
        "allRightsReserved": "All rights reserved.",
        "documentation": "Documentation",
        "mosipCommunity": "MOSIP Community",
        "contactUs": "Contact Us"
    },
    "selectPolicyPopup": {
        "title": "Select Policy Group",
        "description": "The data provided during registration, including your Name, Phone Number, Email Address, Organisation Name, and Address, will be used by the Partner Management Portal (PMP)",
        "partnerTypeLabel": "Partner Type",
        "policyGroup": "Policy Group",
        "policyGroupError": "Unable to fetch any policy groups. Contact the administrator.",
        "submit": "Submit",
        "viewLess": "View Less",
        "viewMore": "View More",
        "logoutMsg": "Do not want to select policy group and proceed further?"
    },
    "loading": "Loading",
    "partnerCertificatesList": {
        "partnerCertificate": "Partner Certificate",
        "noPartnerTypesAreMapped": "No partner types are mapped to your user id",
        "uploadPartnerCertificate": "Upload CA Signed Partner Certificate",
        "certificateFormatMsg": "Only .cer or .pem certificate formats are allowed for upload",
        "download": "Download",
        "originalCertificate": "Original Certificate",
        "mosipSignedCertificate": "MOSIP Signed Certificate",
        "reUpload": "Re-Upload",
        "upload": "Upload",
        "partnerType": "Partner Type",
        "expiryDate": "Expiry Date",
        "timeOfUpload": "Time of Upload",
        "errorMsgForOriginalCertificate": "This feature is under development.",
        "errorWhileDownloadingCertificate": "There is some error in downloading the certificate. Try again later!",
        "errorInCertificateList": "There is some error in fetching the certificates. Try again later!",
        "originalCertificateSuccessMsg": "Originally uploaded CA signed certificate downloaded successfully.",
        "mosipSignedCertificateSuccessMsg": "MOSIP signed certificate downloaded successfully.",
        "certificateExpired": "Certificate has expired. Please upload a valid certificate"
    },
    "uploadCertificate": {
        "uploadPartnerCertificate": "Upload Partner Certificate",
        "reUploadPartnerCertificate": "Re-Upload Partner Certificate",
        "selectFieldsMsg": "Please select the fields and upload certificate.",
        "partnerTypeLabel": "Partner Type",
        "partnerDomainType": "Partner Domain Type",
        "selectingFile": "Weâ€™re fetching your certificate...",
        "cancel": "Cancel",
        "selectCertificate": "Please tap to select the certificate",
        "certificateFormat": "Only .cer or .pem certificate formats are allowed for upload",
        "remove": "Remove",
        "close": "Close",
        "submit": "Submit",
        "successMsg": "Partner certificate for {{partnerType}} is uploaded successfully.",
        "lastcertificateUploadDate": "Last certificate was uploaded on {{date}}",
        "fileUploadError": "Please select a file with .cer or .pem extension.",
        "unableToUploadCertificate": "Unable to upload partner certificate",
        "errorWhileUploadingCertificate": "There is some error in uploading the certificate. Try again later!"
    },
    "partnerTypes": {
        "deviceProvider": "Device Provider",
        "ftmProvider": "FTM Provider",
        "authPartner": "Authentication Partner",
        "credentialPartner": "Credential Partner",
        "onlineVerficationPartner": "Online Verification Partner",
        "abisPartner": "ABIS Partner",
        "mispPartner": "MISP Partner",
        "sdkPartner": "SDK Partner",
        "printPartner": "Print Partner",
        "internalPartner": "Internal Partner",
        "manualAdjudication": "Manual Adjudication"
    },
    "statusCodes": {
        "approved": "Approved",
        "inProgress": "Pending For Approval",
        "rejected": "Rejected",
        "deactivated": "Deactivated",
        "activated": "Activated"
    },
    "policies": {
        "policies": "Policies",
        "requestPolicyBtn": "Request Policy",
        "listOfPolicies": "List of Policy Requests",
        "partnerId": "Partner ID",
        "partnerType": "Partner Type",
        "policyGroupName": "Policy Group",
        "policyName": "Policy Name",
        "createdDate": "Created Date",
        "status": "Status",
        "action": "Action",
        "view": "View",
        "selectPartnerId": "Select Partner ID",
        "selectPartnerType": "Select Partner Type",
        "selectPolicyGroup": "Select Policy Group",
        "selectPolicyName": "Select Policy Name",
        "selectStatus": "Select Status",
        "errorInPoliciesList": "There is some error in fetching the policies. Try again later!"
    },
    "viewPolicyDetails": {
        "viewPolicyDetails": "View Policy Details",
        "policySection": "Policies",
        "policyName": "Policy Name",
        "partnerId": "Partner ID",
        "partnerIdName": "Partner ID Name",
        "partnerType": "Partner Type",
        "policyGroupName": "Policy Group",
        "policyGroupDescription": "Policy Group Description",
        "policyNameDescription": "Policy Name Description",
        "comments": "Comments",
        "adminComments": "Admin Comments",
        "partnerComments": "Partner's Comments",
        "back": "Back",
        "createdOn": "Created On"
    },
    "requestPolicy": {
        "requestPolicy": "Request a Policy",
        "policies": "Policies",
        "mandatoryFieldsMsg1": "All fields marked with",
        "mandatoryFieldsMsg2": "are mandatory.",
        "partnerId": "Partner ID",
        "partnerType": "Partner Type",
        "policyGroup": "Policy Group",
        "policyName": "Policy Name",
        "selectPartnerId": "Approved Partner ID",
        "selectPolicyName": "Select policy name",
        "comments": "Comments",
        "commentBoxDesc": "Mention the purpose of requesting the policy",
        "clearForm": "Clear Form",
        "cancel": "Cancel",
        "submit": "Submit",
        "errorInResponse": "There is some error in fetching the details for all approved policy groups. Try again later!",
        "errorInFetchingPolicyNames": "There is some error in fetching the policy names. Try again later!",
        "errorInMapPolicy": "While requesting a policy, we have encountered with an error",
        "policySuccessHeader": "Policy Submitted Successfully!",
        "policySuccessMsg": "Policy request process has been successfully submitted. Approval is pending with admin.",
        "info": "Only those partner IDs whose partner certificate is uploaded is available in the dropdown. If you don't find your partner ID, please upload partner certificate first",
        "commentTooLong": "Comments should not allow more than 500 characters."
    },
    "authenticationServices": {
        "authenticationServices": "Authentication Services",
        "oidcClient": "OIDC Client",
        "partnerId": "Partner ID",
        "policyName": "Policy Name",
        "policyGroup": "Policy Group",
        "oidcClientName": "OIDC Client Name",
        "createdDate": "Created Date",
        "expiryDate": "Expiry Date",
        "status": "Status",
        "oidcClientId": "OIDC Client ID",
        "action": "Action",
        "createOidcClientBtn": "Create OIDC Client",
        "apiKey": "API Key",
        "apiKeyLable": "API Key Label",
        "generateApiKeyBtn": "Generate API Key"
    },
    "createOidcClient": {
        "createOidcClient": "Create OIDC Client",
        "help": "Help",
        "selectPartnerId": "Select Partner ID",
        "devicePartner": "Device Partner",
        "policyGroupGoesHere": "Policy Group Goes Here",
        "policyNameToolTip": "Make sure to request policy for given partner ID in POLICIES screen first. Only those policies in APPROVED status is available in dropdown.",
        "policyNamePlaceHolder": "Select policy for which OIDC Client ID is required",
        "selectPolicyName": "Select Policy Name",
        "nameTooLong": "Name should not allow more than 256 characters.",
        "enterNameForOidcClient": "Enter a name for OIDC Client",
        "publicKey": "Public Key",
        "publicKeyToolTip": "Only JWK format is allowed",
        "publicKeyPlaceHolder": "Enter public key in JWK format only",
        "logoUrl": "Logo URI",
        "logoUrlPlaceHolder": "Enter Logo URI",
        "redirectUrl": "Redirect URI",
        "redirectUrlPlaceHolder": "Enter Redirect URI",
        "grantTypes": "Grant Types",
        "authorization_code": "Authorization Code",
        "enterGrantTypes": "Enter Grant Types",
        "delete": "Delete",
        "addNew": "Add New",
        "requestSuccessHeader": "Details Submitted Successfully!",
        "requestSuccessMsg": "OIDC Client details has been successfully submitted.",
        "commentBoxDesc": "Mention the purpose of requesting the OIDC Client",
        "errorInCreateOIDC": "While requesting OIDC Client, we have encountered with an error",
        "invalidJwkFormat": "Enter valid public key in JWK format",
        "duplicateUrl": "Duplicate URIs are not allowed",
        "partnerIdTooltip": "Only those Authentication Partner IDs whose partner certificate is uploaded is available in the dropdown. If you don't find your partner ID, please upload partner certificate first"
    },
    "oidcClientsList": {
        "partnerId": "Partner ID",
        "policyGroup": "Policy Group",
        "policyName": "Policy Name",
        "oidcClientName": "OIDC Client Name",
        "createdDate": "Created Date",
        "status": "Status",
        "oidcClientId": "OIDC Client ID",
        "action": "Action",
        "listOfOidcClients": "List of OIDC Clients",
        "createOidcClient": "Create OIDC Client",
        "filterBtn": "Filter",
        "resetFilter": "Reset Filter",
        "view": "View",
        "edit": "Edit",
        "deActivate": "Deactivate",
        "copy": "Copy",
        "copied": "Copied!",
        "selectPartnerId": "Select Partner ID",
        "selectOidcClientType": "Select OIDC Client",
        "selectPolicyGroup": "Select Policy Group",
        "selectPolicyName": "Select Policy Name",
        "selectStatus": "Select Status",
        "errorInOidcClientsList": "While fetching OIDC Clients List, we have encountered with an error."
    },
    "viewOidcClientDetails": {
        "viewOidcClientDetails": "View OIDC Client Details",
        "authenticationServiceSection": "Authentication Services",
        "createdOn":"Created On",
        "oidcClientId":"OIDC Client ID",
        "copied!": "Copied!",
        "partnerId":"Partner ID",
        "partnerIdAlias": "Partner ID Alias",
        "partnerType":"Partner Type",
        "policyGroup":"Policy Group",
        "policyName":"Policy Name",
        "policyGroupDescription":"Policy Group Description",
        "policyNameDescription":"Policy Name Description",
        "clientName":"Client Name",
        "publicKey":"Public Key",
        "logoUri": "Logo URI",
        "redirectUri": "Redirect URI",
        "grantTypes":"Grant Types",
        "comments":"Comments",
        "adminComment":"Admin Comments",
        "adminName": "Admin Name",
        "commentsOfAdmin": "Comments of Admin",
        "partnersComment": "Partner's Comment",
        "back": "Back"
    },
    "viewApiKeyDetails": {
        "viewApiKeyDetails": "View API Key Details",
        "viewApiKeyId": "View API Key ID",
        "label": "Label",
        "apiKeyName": "API Key Name",
        "copyApiKeyMsg": "API Key contains sensitive information. Make sure you copy the API key before closing this window because once closed - the API Key pop up window will be disabled for view."
    },
    "editOidcClient": {
        "editOidcClient": "Edit OIDC Client",
        "authenticationServiceSection": "Authentication Services",
        "editSuccessHeader": "Modified details submitted successfully!",
        "editSuccessMsg": "OIDC Client details has been successfully modified and submitted."
    },
    "deactivateOidcClient": {
       "oidcClientName": "Do you want to Deactivate OIDC Client",
       "description": "On clicking Confirm, you will not be able to use the OIDC Client ID for authentication anymore.",
       "confirm": "Confirm"
    },
    "apiKeysList" : {
        "apiKeyLabel": "API Key Name",
        "apiKeyId": "API Key ID",
        "apiKey": "API Key",
        "generateApiKey": "Generate API Key",
        "listOfApiKeyRequests": "List of API Keys",
        "selectApiKeyLabel": "Select API Key Name",
        "apiKeyIdAlertMsg": "API Key contains sensitive information. Make sure to copy the API key before closing this window because the API key will not be visible anymore once the window is closed.",
        "errorInApiKeysList": "While fetching API Key Requests, we have encountered with an error."
    },
    "generateApiKey": {
        "generateApiKey": "Generate API Key",
        "selectedPolicyName": "Select policy for which API Key is required",
        "enterNameForApiKey": "Enter a name for API key",
        "generateApiKeySuccessHeader":"Details submitted successfully!",
        "apiKeySuccessMsg": "API Key details has been submitted successfully.",
        "errorInGenerateApiKey": "While generating API Key, we have encountered with an error.",
        "nameTooLong": "Name should not allow more than 36 characters."
    },
    "deactivateApiKey": {
       "apiKeyName": "Do you want to Deactivate API Key",
       "description": "On clicking Confirm, you will not be able to use the API Key for authentication anymore."
    },
    "consentPopup": {
        "title": "Terms and Conditions",
        "description": "The data provided during registration, including your Name, Phone Number, Email Address, Organisation Name, and Address, will be used by the Partner Management Portal (PMP). Your email address will also be used for password resets, email verification, and notifications in the event of Partner Certificate expiration or similar situations. This information will be used solely to create your credentials, facilitating your use of MOSIP. By ticking the box below, you consent to submitting your data to be stored and processed for the above purpose.",
        "checkBoxDesc": "I have read the terms & conditions and consent to submitting my data to be stored and processed for the stated purpose.",
        "proceed": "Proceed",
        "logoutMsg": "Incase if you do not wish to proceed further, you can",
        "consentFetchError": "Error while fetching user consent",
        "consentSaveError": "Error while saving user consent"
     },
     "blockerMessage": {
        "description": "Your changes will be lost, are you sure you want to proceed?",
        "cancel": "Cancel",
        "proceed": "Proceed"
     },
    "serverError": {
        "PMS_COR_001": "Missing Input Parameter",
        "PMS_PRT_002": " Policy group does not exist",
        "PMS_PRT_010": " Partner Type does not exist",
        "PMS_PRT_310": " Invalid column received : %s",
        "PMS_PRT_313": " Invalid pagination value received pagestart:%d and pagefetch:%d",
        "PMS_PRT_312": " Filter type is missing",
        "PMS_PRT_311": " Column is missing in request",
        "PMS_PRT_314": " Missing sort field or sort type values",
        "PMS_PRT_315": " Invalid fromValue or toValue",
        "PMS_PRT_356": " Pagination cannot be null",
        "PMS_PRT_358": " Sort type %s is not supported",
        "PMS_PRT_359": " Error occured while sorting",
        "PMS_PRT_357": " Invalid sort field %s",
        "KER_PRT_390": " Invalid filter value",
        "KER-PCM-008": "Partner Organization Name not Matched.",
        "PMS_PRT_001": "  A Partner is already registered with the same Name",
        "PMS_PRT_051": " A Partner is already registered with the same Id",
        "PMS_PRT_052": "PartnerId max length should be 36",
        "PMS_ATH_053": " IO Exception occured while passing paging request",
        "PMS_ATH_054": " User not found",
        "PMS_ATH_500": " Server error occurred,Please check the logs ",
        "PMS_PRT_061": "Partner policy mapping not exists.",
        "PMS_PRT_062": "Partner api key request is approved already. Cann't add extractors now.",
        "PMS_PRT_063": "Biometric extractors can be added only for:",
        "PMS_PRT_064": "No details found",
        "PMS_PRT_070": "Credential mapping allowed only for :",
        "PMS_PRT_071": "Error occured while parsing policy string to json object",
        "PMS_PRT_072": "Given credential type is not allowed. Allowed credential types : ",
        "PMS_PRT_073": "Policy not exists.",
        "PMS_PRT_074": "User exists with same email",
        "PMS_PRT_005": "Partner does not exist",
        "PMS_PRT_006": "No api key req exist",
        "PMS_PRT_105": "Partner API KEY is not Created",
        "PMS_PRT_011": " Email is already exists.",
        "PMS_PRT_012": " Invalid emailId.",
        "PMS_PRT_013": " Invalid mobile number.Length should be less than .",
        "PMS_ATH_401": "Authentication Failed",
        "PMS_PRT_106": "APIKeyReqID status is In_progress",
        "PMS_KKS_001": " API not accessible  ",
        "PMS_PRT_107": "Responese from the api is null",
        "PMS_PRT_500": "Unable to process the request.",
        "PMS_PMP_016": "Partner is not active.",
        "PMS_PRT_098": "Given policy under partner's policy group not exists.",
        "PMS_PMP_019": "Policy is not active.",
        "PMS_PMP_023": "Policy group is not active.",
        "PMS_DTS_001": "  DataShare response is null",
        "PMS_PRT_045": "Error occured while parsing P7B certificate data",
        "PMS_PRT_046": "Error occured while extracting the leaf cert.",
        "PMS_PRT_047": "Partner is not mapped to policy group",
        "PMS_PRT_048": "policy group mapping is not required for given partner",
        "PMS_PRT_049": "policy group mapping exists for given partner.",
        "PMS_PRT_050": "Policy group cannot be updated for approved partner",
        "PMS_PRT_054": "Policy group not mapped for given partner",
        "PMS_PRT_055": "User not authorized.",
        "PMS_PM_034": " Policy request already approved.",
        "PMS_PM_035": " Policy request already rejected.",
        "PMS_PM_045": " Status should be either Approved or Rejected",
        "PMS_PM_051": " Extractors are not present. Please add extractors.",
        "PMS_PM_058": " Status should be either Active or De_Active",
        "PMS_PMP_010": "Policy does not belong to the Policy Group of the Partner Manger",
        "PMS_PMP_015": "No Partner api key requests for the Policy Group",
        "PMS_PMP_007": "Partner api key does not exist",
        "PMS_PMP_011": "Partner api key does not exist",
        "PMS_PMP_009": " For given partner and apikey mapping not exists.",
        "PMS_PMP_013": "Partner does not exist",
        "PMS_PMP_005": "Partner ID does not exist",
        "PMS_PMP_017": "Partner is not mapped to any policy.",
        "PMS_PMP_020": "MISP license key not exists.",
        "PMS_PMP_021": "MISP license key is expired.",
        "PMS_PMP_022": "Policy not exists.",
        "PMS_PMP_024": "Policy file is corrupted.",
        "PMS_PMP_025": "License key of MISP is blocked",
        "PMS_PMP_50": "Given apikey,partner and policy mapping not exists.",
        "PMS_PMP_51": "Given policy is not belongs to partner's policy group",
        "PMS_PMP_052": "Partner Certificate not available",
        "PMS_PMP_014": "Policy does not exist",
        "PMS_PMS_022": "API key has already been deactivated",
        "PMS_PMP_018": "Policy expired.",
        "PMS_PRT_108": "Policy group is Mandatory for Auth_Partner",
        "PMS_PRT_110": "Entered API Key name already exists. Provide a unique API Key name and submit.",
        "PMS_AUT_002": "Device provider id not found from the partners list",
        "PMS_AUT_003": "Device Details already exists",
        "PMS_AUT_004": "Duplicate request received",
        "PMS_AUT_005": "Device detail for id %s does not exist",
        "PMS_AUT_025": "ApprovalStatus should be Activate / De_activate;",
        "PMP_AUT_030": "ftp provider not exists.",
        "PMP_AUT_031": "ftp chip id not exists.",
        "PMP_AUT_032": "Given provider,make and model already exists.",
        "PMP_AUT_033": "Certificate is not uploaded.",
        "PMP_AUT_034": "Ftp chip detail id and ftp provider id not mappped. ",
        "PMP_AUT_037": "Given ftp chip details already registered.;",
        "PMS_AUT_007": "Secure Biometric Interface not found for the id %s",
        "PMS_AUT_026": "ApprovalStatus should be Activate / De_activate",
        "PMS_AUT_506": "Provide device details of same provider.",
        "PMS_AUT_507": "ExpiryDate should be greaterthan createdDate",
        "PMS_AUT_508": "ExpiryDate should be greaterthan/equal Today.;",
        "PMS_POL_002": "Mismatch of Policy Manager Credentials",
        "PMS_POL_004": "Policy Name already exists in the policy Group.Name : ",
        "PMS_POL_005": "Unsupported KYC attribute in the Policy File",
        "PMS_POL_006": "Unsupported Authentication Type in the Policy File",
        "PMS_POL_007": "eKYC attribute missing in the policy file",
        "PMS_POL_008": "Policy ID does not exist",
        "PMS_POL_009": "Auth policy exists with name : ",
        "PMS_COR_002": "Invalid Input Parameter _ ",
        "PMS_COR_003": "Could not process the request",
        "PMS_POL_010": " Auth Policies are not defined against to policy",
        "PMS_POL_013": "No policy available for given PartnerAPIKey",
        "PMS_POL_014": "Policy group exists with name : ",
        "PMS_POL_015": "Policy group and policy not mapped.",
        "PMS_POL_016": "Policy Group ID does not exist",
        "PMS_POL_017": "No policy available for given partner",
        "PMS_POL_018": "Given partner and policy are not mapped.",
        "PMS_POL_019": "Policy group name does not exist",
        "PMS_POL_020": "Can not publish the published policy",
        "PMS_POL_021": "allowed auth types are not required for policyType ",
        "PMS_POL_022": "Given auth token type is not allowed",
        "PMS_POL_023": "Given policy type is not allowed ",
        "PMS_POL_045": "Policy Status either Active or De_active.",
        "PMS_POL_046": "Datashare attributes are not required for given policyType ",
        "PMS_POL_047": "Shareable attributes are not required for given policyType ",
        "PMS_POL_048": "AllowedKYC attributes are not required for given policyType ",
        "PMS_POL_050": "The given version is not available.Allowed versions are : ",
        "PMS_POL_051": "Policy Schema and policy are not matching",
        "PMS_POL_052": "Error occured while parsing policy string to json object",
        "PMS_POL_053": "Policy group is not active.",
        "PMS_POL_054": "Cannot activate unpublished policy.",
        "PMS_POL_055": "Published policy cannot be updated.",
        "PMS_POL_056": "Active policies exists under the policy group.",
        "PMS_POL_057": "Active apiKey exists under the policy.",
        "PMS_POL_058": "Status cannot be changed for published policy.;",
        "PMS_POL_059": "There are no active policy groups.",
        "KER-PCM-006": "Root CA/Intermediate CA Certificates not found.",
        "KER-PCM-015": "Self Signed Certificate not allowed as partner.",
        "KER-PCM-004": "Certificate Date is not valid.",
        "KER-KMS-013": "Certificate Parsing Error.signed overrun, bytes = 917",
        "PMS_AUT_001": "Reg Device Sub Type Code not found in the list of Reg Device Sub Types",
        "PMS_PV_005": "Invalid input parameter - errorCode in policy data",
        "PMS_PRT_053": "This policy is already pending for approval against your partner ID.",
        "PMS_PRT_060": "This policy has already been approved against your partner ID.",
        "PMS_AUT_028": "Device details for id $ID are rejected. Can't use same details for mapping.",
        "PMS_CERTIFICATE_ERROR_001": "Error while fetching partner certificates.",
        "PMS_CERTIFICATE_ERROR_002": "User Id does not exists.",
        "PMS_CERTIFICATE_ERROR_003": "Partner Id is null or empty.",
        "PMS_CERTIFICATE_ERROR_004": "Partner Type is null or empty",
        "PMS_CERTIFICATE_ERROR_005": "Approval Status is null or empty",
        "PMS_CERTIFICATE_ERROR_006": "Unable to decode the certificate data",
        "PMS_POLICY_ERROR_001": "Policy Group does not exists.",
        "PMS_POLICY_ERROR_002": "Error while fetching partner policies.",
        "PMS_POLICY_ERROR_003": "Error while fetching all approved partner Ids with policy groups.",
        "PMS_POLICY_ERROR_004": "Matching Policy not found.",
        "PMS_POLICY_ERROR_005": "Policy Group Id is empty.",
        "PMS_POLICY_ERROR_006": "Error while fetching OIDC clients list.",
        "PMS_POLICY_ERROR_007": "Error while fetching API Key requests",
        "PMS_ESI_001": "Client public key already exists.",
        "PMS_ESI_002": "Partner policy mapping is not approved. Please check mapping status.",
        "PMS_ESI_003": "Policy having mandatory auths. So client can't be created for the same.",
        "PMS_ESI_004": "Client not exists with given id.",
        "PMS_ESI_005": "Partner has no user claims",
        "PMS_ESI_006": "Partner has no Authentication Context Refrences",
        "PMS_ESI_007": "Failed to process the Public Key",
        "PMS_ESI_008": "Client already deactivated.",
        "PMS_PRT_056": "Given langCode is not supported",
        "PMS_PRT_057": "Policy Type Mismatch. Only Auth policy can be used to create OIDC Client.",
        "PMS_PRT_058": "AuthPartner doesn't exists with this Id",
        "PMS_PRT_059": "Only Auth_partner can Create OIDC Client. Other partner types are not allowed to create OIDC Client.",
        "PMS_PRT_066": "PartnerId should not have any spaces",
        "PMS_PRT_096": "Json is not valid",
        "PMS_CONSENT_ERROR_001": "Error while fetching partner consent.",
        "PMS_CONSENT_ERROR_002": "Error while saving partner consent.",
        "PMP-AUT-020": "Parse Error exception",
        "PMP-AUT-021": "Audit Exception from client",
        "KER-AUD-001": "PartnerId max length should be 36"
    }
}
